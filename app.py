"""
ASL Fingerspelling Trainer - Streamlit Web App
Quick Demo/Prototype for practicing ASL fingerspelling with real-time feedback
"""

import streamlit as st
import cv2
import mediapipe as mp
import numpy as np
from PIL import Image
import time
import os
import glob
import warnings
warnings.filterwarnings('ignore')

# Import utility functions
from utils.model_loader import init_mediapipe, load_models
from utils.prediction import predict_letter
from utils.hand_processing import extract_keypoints, is_in_roi, calculate_bbox
from utils.letter_data import get_letter_instructions

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()  # Load .env file
    ENV_AVAILABLE = True
except ImportError:
    ENV_AVAILABLE = False

try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False
    st.warning("‚ö†Ô∏è google-generativeai not installed. Translation mode will be limited.")

# Page configuration
st.set_page_config(
    page_title="ASL Fingerspelling Trainer",
    page_icon="ü§ü",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        color: #4A90E2;
        text-align: center;
        margin-bottom: 1rem;
    }
    .subtitle {
        text-align: center;
        color: #7F8C8D;
        margin-bottom: 2rem;
    }
    .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    .stat-value {
        font-size: 2.5rem;
        font-weight: bold;
    }
    .stat-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    .feedback-correct {
        background-color: #50C878;
        color: white;
        padding: 15px;
        border-radius: 10px;
        font-size: 1.2rem;
        text-align: center;
    }
    .feedback-incorrect {
        background-color: #E74C3C;
        color: white;
        padding: 15px;
        border-radius: 10px;
        font-size: 1.2rem;
        text-align: center;
    }
    .feedback-warning {
        background-color: #F39C12;
        color: white;
        padding: 15px;
        border-radius: 10px;
        font-size: 1.2rem;
        text-align: center;
    }
    </style>
""", unsafe_allow_html=True)

# Initialize MediaPipe
mp_hands, mp_drawing, hands = init_mediapipe()

# Initialize session state
if 'stats' not in st.session_state:
    st.session_state.stats = {
        'attempts': 0,
        'correct': 0,
        'total_accuracy': 0
    }

if 'current_letter' not in st.session_state:
    st.session_state.current_letter = 'A'

if 'keypoint_buffer' not in st.session_state:
    st.session_state.keypoint_buffer = []

if 'frame_buffer' not in st.session_state:
    st.session_state.frame_buffer = []

if 'translated_text' not in st.session_state:
    st.session_state.translated_text = ""

if 'refined_text' not in st.session_state:
    st.session_state.refined_text = ""

if 'translation_buffer' not in st.session_state:
    st.session_state.translation_buffer = []

# Alphabet
ALPHABET = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')

# Load models on startup
MODELS_DATA = load_models()

# Main app
def main():
    # Header
    st.markdown('<h1 class="main-header">ü§ü ASL Fingerspelling Trainer</h1>', unsafe_allow_html=True)
    st.markdown('<p class="subtitle">‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© A-Z</p>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Settings")
        
        mode = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î",
            ["üìö Learning Mode", "‚úã Practice Mode", "üéØ Test Mode", "üåê Real-time Translation"],
            index=3  # Default to Real-time Translation
        )
        
        st.markdown("---")
        
        if mode == "‚úã Practice Mode":
            st.session_state.current_letter = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£",
                ALPHABET,
                index=ALPHABET.index(st.session_state.current_letter)
            )
            
            if st.button("üîÑ Reset Stats"):
                st.session_state.stats = {
                    'attempts': 0,
                    'correct': 0,
                    'total_accuracy': 0
                }
                st.rerun()
        
        st.markdown("---")
        st.markdown("### üí° Tips")
        st.markdown("""
        - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏µ
        - ‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
        - ‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        - ‡πÉ‡∏´‡πâ‡∏°‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠
        """)
        
        st.markdown("---")
        st.markdown("### üìñ About")
        st.info("ASL Fingerspelling Trainer v1.0\n\n‡πÉ‡∏ä‡πâ AI ‡πÅ‡∏•‡∏∞ Computer Vision ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö Real-time")
    
    # Main content based on mode
    if mode == "üìö Learning Mode":
        show_learning_mode()
    elif mode == "‚úã Practice Mode":
        show_practice_mode()
    elif mode == "üåê Real-time Translation":
        show_translation_mode()
    else:
        show_test_mode()

def show_learning_mode():
    """Learning Mode - View ASL alphabet reference"""
    st.header("üìö ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ - ‡∏î‡∏π‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    
    st.info("‚ÑπÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
    
    # Create grid for alphabet
    cols_per_row = 6
    rows = [ALPHABET[i:i+cols_per_row] for i in range(0, len(ALPHABET), cols_per_row)]
    
    for row in rows:
        cols = st.columns(cols_per_row)
        for idx, letter in enumerate(row):
            with cols[idx]:
                if st.button(letter, key=f"learn_{letter}", use_container_width=True):
                    show_letter_detail(letter)

def show_letter_detail(letter):
    """Show detailed information about a letter"""
    st.markdown(f"### ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ {letter}")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # Try to load ASL alphabet reference image
        asl_image_path = f"assets/asl/{letter}.svg"
        if os.path.exists(asl_image_path):
            try:
                st.image(asl_image_path, use_container_width=True)
            except:
                # Fallback to large letter display
                st.markdown(f"<div style='font-size: 8rem; text-align: center; color: #4A90E2;'>{letter}</div>", 
                           unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='font-size: 8rem; text-align: center; color: #4A90E2;'>{letter}</div>", 
                       unsafe_allow_html=True)
        
        # Load images from dataset
        dataset_path = f"datasets/asl_dataset/{letter.lower()}"
        if os.path.exists(dataset_path):
            images = glob.glob(f"{dataset_path}/*.jpeg")[:6]  # Get first 6 images
            
            if images:
                st.markdown("#### ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠:")
                # Display images in 2 rows of 3
                for i in range(0, len(images), 3):
                    img_cols = st.columns(3)
                    for j, img_path in enumerate(images[i:i+3]):
                        with img_cols[j]:
                            try:
                                img = Image.open(img_path)
                                st.image(img, use_container_width=True)
                            except:
                                st.error("‚ùå")
            else:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ {letter}")
        else:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {dataset_path}")
    
    with col2:
        st.markdown("#### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ó‡πà‡∏≤:")
        instructions = get_letter_instructions(letter)
        st.write(instructions)
        
        st.markdown("---")
        st.markdown("#### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        st.markdown("""
        - ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö
        - ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏≠
        - ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
        - ‡∏ù‡∏∂‡∏Å‡∏à‡∏ô‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        """)
        
        if st.button("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏µ‡πâ", type="primary"):
            st.session_state.current_letter = letter
            st.rerun()

def show_practice_mode():
    """Practice Mode - Real-time practice with feedback"""
    st.header(f"‚úã ‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô - ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ {st.session_state.current_letter}")
    
    # Create two columns: Reference images and Practice area
    col_ref, col_practice = st.columns([1, 2])
    
    with col_ref:
        st.markdown("### üì∏ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠")
        
        # Load reference images from dataset
        letter = st.session_state.current_letter
        dataset_path = f"datasets/asl_dataset/{letter.lower()}"
        
        if os.path.exists(dataset_path):
            images = glob.glob(f"{dataset_path}/*.jpeg")[:4]  # Show 4 reference images
            
            if images:
                for i in range(0, len(images), 2):
                    img_cols = st.columns(2)
                    for j, img_path in enumerate(images[i:i+2]):
                        with img_cols[j]:
                            try:
                                img = Image.open(img_path)
                                st.image(img, use_container_width=True)
                            except:
                                pass
            else:
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        # Instructions
        st.markdown("---")
        st.markdown("### üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏ó‡πà‡∏≤")
        instructions = get_letter_instructions(letter)
        st.info(instructions)
    
    with col_practice:
        # Display stats
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="stat-card">
                <div class="stat-value">{st.session_state.stats['attempts']}</div>
                <div class="stat-label">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á</div>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{st.session_state.stats['correct']}</div>
            <div class="stat-label">‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        success_rate = (st.session_state.stats['correct'] / st.session_state.stats['attempts'] * 100) if st.session_state.stats['attempts'] > 0 else 0
        st.markdown(f"""
        <div class="stat-card">
            <div class="stat-value">{success_rate:.0f}%</div>
            <div class="stat-label">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>
        </div>
        """, unsafe_allow_html=True)
    
        st.markdown("---")
        
        # Camera section
        st.subheader("üì∑ Camera Feed")
        run_camera = st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á", value=False)
        
        if run_camera:
            run_webcam_detection()
        
        if st.button("‚è≠Ô∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
            current_idx = ALPHABET.index(st.session_state.current_letter)
            next_idx = (current_idx + 1) % len(ALPHABET)
            st.session_state.current_letter = ALPHABET[next_idx]
            st.rerun()

def run_webcam_detection():
    """Run webcam with hand detection"""
    hands, mp_drawing, mp_hands = init_mediapipe()
    
    FRAME_WINDOW = st.image([])
    feedback_placeholder = st.empty()
    
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    
    if not cap.isOpened():
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        return
    
    stop_button = st.button("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    while not stop_button:
        ret, frame = cap.read()
        if not ret:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            break
        
        # Flip frame horizontally for mirror effect
        frame = cv2.flip(frame, 1)
        
        # Convert to RGB
        image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Store raw frame for CNN models (before drawing)
        frame_for_cnn = frame.copy()
        st.session_state.frame_buffer.append(frame_for_cnn)
        if len(st.session_state.frame_buffer) > 30:
            st.session_state.frame_buffer.pop(0)
        
        # Process with MediaPipe
        results = hands.process(image_rgb)
        
        feedback_message = ""
        feedback_class = "feedback-warning"
        
        if results.multi_hand_landmarks:
            # Draw hand landmarks
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(
                    frame,
                    hand_landmarks,
                    mp_hands.HAND_CONNECTIONS
                )
                
                # Extract keypoints
                keypoints = extract_keypoints(hand_landmarks)
                st.session_state.keypoint_buffer.append(keypoints)
                
                # Keep only recent frames
                if len(st.session_state.keypoint_buffer) > 60:
                    st.session_state.keypoint_buffer.pop(0)
                
                # Check bounding box
                bbox = calculate_bbox(hand_landmarks)
                in_roi = is_in_roi(bbox)
                hand_size = max(bbox['width'], bbox['height'])
                
                if not in_roi:
                    feedback_message = "‚ö†Ô∏è ‡∏°‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö"
                    feedback_class = "feedback-warning"
                elif hand_size < 0.2:
                    feedback_message = "üîç ‡∏°‡∏∑‡∏≠‡πÄ‡∏•‡πá‡∏Å‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á"
                    feedback_class = "feedback-warning"
                elif len(st.session_state.keypoint_buffer) >= 15:
                    # Predict
                    predicted_letter, confidence = predict_letter(st.session_state.keypoint_buffer, MODELS_DATA, ALPHABET)
                    
                    if predicted_letter and confidence >= 0.7:
                        is_correct = predicted_letter == st.session_state.current_letter
                        
                        if is_correct:
                            feedback_message = f"‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! {predicted_letter} ({confidence*100:.0f}%)"
                            feedback_class = "feedback-correct"
                            
                            # Update stats
                            st.session_state.stats['attempts'] += 1
                            st.session_state.stats['correct'] += 1
                            st.session_state.stats['total_accuracy'] += confidence * 100
                            
                            # Clear buffer
                            st.session_state.keypoint_buffer = []
                            time.sleep(1)
                        else:
                            feedback_message = f"üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ: {predicted_letter} ({confidence*100:.0f}%) - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {st.session_state.current_letter}"
                            feedback_class = "feedback-incorrect"
                    else:
                        feedback_message = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö..."
                        feedback_class = "feedback-warning"
                else:
                    feedback_message = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
                    feedback_class = "feedback-warning"
                
                # Draw ROI box
                h, w = frame.shape[:2]
                cv2.rectangle(frame, 
                            (int(w*0.2), int(h*0.1)), 
                            (int(w*0.8), int(h*0.8)), 
                            (0, 255, 0), 2)
        else:
            feedback_message = "‚úã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏°‡∏∑‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö"
            feedback_class = "feedback-warning"
        
        # Display frame
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        FRAME_WINDOW.image(frame_rgb, channels="RGB", use_container_width=True)
        
        # Display feedback
        if feedback_message:
            feedback_placeholder.markdown(
                f'<div class="{feedback_class}">{feedback_message}</div>',
                unsafe_allow_html=True
            )
    
    cap.release()

def show_translation_mode():
    """Real-time Translation Mode - Translate ASL to text and refine with Gemini API"""
    st.header("üåê ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏ö‡∏ö Real-time")
    
    # Check Gemini API availability
    if not GEMINI_AVAILABLE:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install google-generativeai")
        return
    
    # API Key configuration - Load from .env or user input
    api_key = os.getenv("GEMINI_API_KEY")  # Try to load from .env first
    
    if not api_key:
        # Show instructions if no API key in .env
        st.info("""
        ### üîë ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Gemini API Key
        
        **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå .env (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤)**
        1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå `.env` ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
        2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: `GEMINI_API_KEY=your_api_key_here`
        3. Restart ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        
        **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏™‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)**
        1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà [Google AI Studio](https://makersuite.google.com/app/apikey)
        2. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key
        3. ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        """)
        
        api_key = st.text_input(
            "Gemini API Key", 
            type="password", 
            help="‡πÉ‡∏™‡πà API Key ‡∏à‡∏≤‡∏Å Google AI Studio (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ .env file)",
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env file"
        )
    else:
        # API key loaded from .env
        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î API Key ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    if not api_key:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Gemini API Key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ")
        return
    
    # Configure Gemini
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini API: {str(e)}")
        return
    
    st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    
    # Translation settings
    col1, col2 = st.columns(2)
    with col1:
        auto_refine = st.checkbox("üîÑ Auto-refine ‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", value=True)
    with col2:
        clear_buffer = st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    
    if clear_buffer:
        st.session_state.translated_text = ""
        st.session_state.refined_text = ""
        st.session_state.translation_buffer = []
        st.rerun()
    
    # Display areas
    st.markdown("### üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ")
    translated_display = st.empty()
    
    st.markdown("### ‚ú® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß (Gemini)")
    refined_display = st.empty()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", len(st.session_state.translated_text))
    with col2:
        st.metric("‡∏Ñ‡∏≥", len(st.session_state.translated_text.split()))
    with col3:
        refine_button = st.button("‚ú® Refine ‡∏î‡πâ‡∏ß‡∏¢ Gemini", type="primary")
    
    # Display current text
    if st.session_state.translated_text:
        translated_display.markdown(f"""
        <div style='background-color: #E8F4F8; padding: 20px; border-radius: 10px; font-size: 1.2rem;'>
            {st.session_state.translated_text}
        </div>
        """, unsafe_allow_html=True)
    
    if st.session_state.refined_text:
        refined_display.markdown(f"""
        <div style='background-color: #E8F8E8; padding: 20px; border-radius: 10px; font-size: 1.2rem;'>
            {st.session_state.refined_text}
        </div>
        """, unsafe_allow_html=True)
    
    # Manual refine button
    if refine_button and st.session_state.translated_text:
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Gemini..."):
            try:
                prompt = f"""You are a helpful assistant that refines text. 
                The following text was detected from ASL fingerspelling and may contain errors or be incomplete.
                Please refine it to make it grammatically correct and meaningful.
                Keep the same language (if Thai, output Thai; if English, output English).
                Only return the refined text, nothing else.
                
                Original text: {st.session_state.translated_text}
                
                Refined text:"""
                
                response = model.generate_content(prompt)
                st.session_state.refined_text = response.text.strip()
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    st.markdown("---")
    st.markdown("### üìπ ‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    # Initialize MediaPipe
    hands, mp_drawing, mp_hands = init_mediapipe()
    
    FRAME_WINDOW = st.image([])
    feedback_placeholder = st.empty()
    
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    
    if not cap.isOpened():
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return
    
    stop_button = st.button("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    last_detected_letter = None
    detection_count = 0
    CONFIRMATION_THRESHOLD = 5  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
    
    while not stop_button:
        ret, frame = cap.read()
        if not ret:
            break
        
        frame = cv2.flip(frame, 1)
        
        # Store raw frame for CNN models (before drawing)
        frame_for_cnn = frame.copy()
        st.session_state.frame_buffer.append(frame_for_cnn)
        if len(st.session_state.frame_buffer) > 30:
            st.session_state.frame_buffer.pop(0)
        
        image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(image_rgb)
        
        feedback_message = ""
        feedback_class = "feedback-warning"
        
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Draw hand landmarks
                mp_drawing.draw_landmarks(
                    frame,
                    hand_landmarks,
                    mp_hands.HAND_CONNECTIONS,
                    mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                    mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)
                )
                
                # Extract keypoints
                keypoints = extract_keypoints(hand_landmarks)
                st.session_state.translation_buffer.append(keypoints)
                
                # Keep buffer size manageable
                if len(st.session_state.translation_buffer) > 30:
                    st.session_state.translation_buffer.pop(0)
                
                # Check hand position
                bbox = calculate_bbox(hand_landmarks)
                in_roi = is_in_roi(bbox)
                
                if in_roi and bbox['width'] >= 0.15 and bbox['height'] >= 0.15:
                    if len(st.session_state.translation_buffer) >= 15:
                        # Predict letter
                        predicted_letter, confidence = predict_letter(st.session_state.translation_buffer, MODELS_DATA, ALPHABET)
                        
                        if predicted_letter and confidence >= 0.75:
                            # Confirmation logic
                            if predicted_letter == last_detected_letter:
                                detection_count += 1
                            else:
                                last_detected_letter = predicted_letter
                                detection_count = 1
                            
                            # Add letter when confirmed
                            if detection_count >= CONFIRMATION_THRESHOLD:
                                st.session_state.translated_text += predicted_letter
                                feedback_message = f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: {predicted_letter}"
                                feedback_class = "feedback-correct"
                                
                                # Auto-refine every 5 characters
                                if auto_refine and len(st.session_state.translated_text) % 5 == 0:
                                    try:
                                        prompt = f"""Refine this text to make it meaningful. Keep it brief.
                                        Original: {st.session_state.translated_text}
                                        Refined:"""
                                        response = model.generate_content(prompt)
                                        st.session_state.refined_text = response.text.strip()
                                    except:
                                        pass
                                
                                # Reset
                                detection_count = 0
                                last_detected_letter = None
                                st.session_state.translation_buffer = []
                                time.sleep(0.5)
                            else:
                                feedback_message = f"üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {predicted_letter} ({detection_count}/{CONFIRMATION_THRESHOLD})"
                                feedback_class = "feedback-warning"
                        else:
                            feedback_message = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."
                            feedback_class = "feedback-warning"
                    else:
                        feedback_message = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
                        feedback_class = "feedback-warning"
                else:
                    feedback_message = "‚ö†Ô∏è ‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
                    feedback_class = "feedback-warning"
        else:
            feedback_message = "üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á"
            feedback_class = "feedback-warning"
        
        # Display frame
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        FRAME_WINDOW.image(frame_rgb, channels="RGB")
        
        # Display feedback
        if feedback_message:
            feedback_placeholder.markdown(
                f'<div class="{feedback_class}">{feedback_message}</div>',
                unsafe_allow_html=True
            )
    
    cap.release()

def show_test_mode():
    """Test Mode - Complete assessment"""
    st.header("üéØ ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    
    st.info("""
    ### üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á 26 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    - ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡πà‡∏≤‡∏ô: 80% (21/26 ‡∏ï‡∏±‡∏ß)
    - ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    """)
    
    if 'test_started' not in st.session_state:
        st.session_state.test_started = False
    
    if not st.session_state.test_started:
        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö", type="primary", use_container_width=True):
            st.session_state.test_started = True
            st.session_state.test_answers = []
            st.session_state.test_start_time = time.time()
            st.rerun()
    else:
        # Show test interface
        elapsed_time = int(time.time() - st.session_state.test_start_time)
        remaining_time = max(0, 900 - elapsed_time)  # 15 minutes
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà", f"{len(st.session_state.test_answers) + 1}/26")
        with col2:
            st.metric("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", f"{elapsed_time//60:02d}:{elapsed_time%60:02d}")
        with col3:
            st.metric("‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{remaining_time//60:02d}:{remaining_time%60:02d}")
        
        if remaining_time == 0:
            show_test_results()
        else:
            st.markdown("### ‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏°‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£:")
            current_letter = ALPHABET[len(st.session_state.test_answers)]
            st.markdown(f"<div style='font-size: 8rem; text-align: center; color: #4A90E2;'>{current_letter}</div>", 
                       unsafe_allow_html=True)
            
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", type="primary"):
                # Mock answer
                st.session_state.test_answers.append({
                    'question': current_letter,
                    'answer': current_letter,
                    'correct': True
                })
                
                if len(st.session_state.test_answers) >= 26:
                    show_test_results()
                else:
                    st.rerun()

def show_test_results():
    """Show test results"""
    st.success("‚úÖ ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    
    correct_count = sum(1 for ans in st.session_state.test_answers if ans['correct'])
    total = len(st.session_state.test_answers)
    percentage = (correct_count / total * 100) if total > 0 else 0
    passed = percentage >= 80
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div style='text-align: center; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; color: white;'>
            <div style='font-size: 5rem; font-weight: bold;'>{correct_count}</div>
            <div style='font-size: 2rem;'>/ {total}</div>
            <div style='font-size: 1.2rem; margin-top: 10px;'>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        ### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {correct_count}/{total} ({percentage:.0f}%)
        - ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {'‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' if passed else '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}
        - ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô: 80% (21/26)
        """)
    
    if st.button("üîÑ ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.test_started = False
        st.session_state.test_answers = []
        st.rerun()

if __name__ == "__main__":
    main()
